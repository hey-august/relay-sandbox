import { BaseJWTSession, SessionOptions, SwAuthorizationState, type SWCloseEvent } from '@signalwire/core';
export declare class JWTSession extends BaseJWTSession {
    options: SessionOptions;
    WebSocketConstructor: {
        new (url: string | URL, protocols?: string | string[] | undefined): WebSocket;
        prototype: WebSocket;
        readonly CLOSED: number;
        readonly CLOSING: number;
        readonly CONNECTING: number;
        readonly OPEN: number;
    };
    CloseEventConstructor: typeof SWCloseEvent | {
        new (type: string, eventInitDict?: CloseEventInit | undefined): CloseEvent;
        prototype: CloseEvent;
    };
    agent: string;
    private tokenTyp;
    constructor(options: SessionOptions);
    get allowReattach(): boolean;
    retrieveRelayProtocol(): Promise<string>;
    persistRelayProtocol(): Promise<void>;
    protected retrieveSwAuthorizationState(): Promise<string>;
    protected persistSwAuthorizationState(state: SwAuthorizationState): Promise<void>;
    protected _onSocketClose(event: SWCloseEvent): void;
    private isVRT;
}
//# sourceMappingURL=JWTSession.d.ts.map