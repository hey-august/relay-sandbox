import { BaseConnectionContract, BaseConnectionState, RoomLeft, RoomLeftEventParams } from '@signalwire/core';
import { BaseConnection, MediaEvent } from '@signalwire/webrtc';
import { RoomScreenShareMethods } from './utils/interfaces';
declare type RoomSessionScreenShareEventsHandlerMap = Record<BaseConnectionState, (params: RoomSessionScreenShare) => void> & Record<RoomLeft, (params?: RoomLeftEventParams) => void> & Record<MediaEvent, () => void>;
export declare type RoomSessionScreenShareEvents = {
    [k in keyof RoomSessionScreenShareEventsHandlerMap]: RoomSessionScreenShareEventsHandlerMap[k];
};
/** @deprecated Use {@link RoomSessionScreenShare} instead */
export interface RoomScreenShare extends RoomSessionScreenShare {
}
export interface RoomSessionScreenShare extends RoomScreenShareMethods, BaseConnectionContract<RoomSessionScreenShareEvents> {
    join(): Promise<void>;
    leave(): Promise<void>;
    /** @internal */
    runWorker: BaseConnection<RoomSessionScreenShareEvents>['runWorker'];
}
export declare class RoomSessionScreenShareConnection extends BaseConnection<RoomSessionScreenShareEvents> {
    join(): Promise<unknown>;
    leave(): Promise<void>;
}
/**
 * Represents a screen sharing.
 */
export declare const RoomSessionScreenShareAPI: import("@signalwire/core").ConstructableType<RoomSessionScreenShareConnection>;
export {};
//# sourceMappingURL=RoomSessionScreenShare.d.ts.map