import { BaseComponentContract, BaseComponentOptions, BaseConnectionContract } from '@signalwire/core';
import { BaseConnection } from '@signalwire/webrtc';
import type { RoomSessionObjectEvents, CreateScreenShareObjectOptions, AddDeviceOptions, AddCameraOptions, AddMicrophoneOptions, BaseRoomInterface, RoomMethods, StartScreenShareOptions, RoomSessionConnectionContract, BaseRoomSessionJoinParams } from './utils/interfaces';
import { RoomSessionScreenShare } from './RoomSessionScreenShare';
import { RoomSessionDevice } from './RoomSessionDevice';
export interface BaseRoomSession<T> extends RoomMethods, RoomSessionConnectionContract, BaseComponentContract, BaseConnectionContract<RoomSessionObjectEvents> {
    /**
     * Joins the room session.
     */
    join(options?: BaseRoomSessionJoinParams): Promise<T>;
    /**
     * Leaves the room. This detaches all the locally originating streams from the
     * room.
     */
    leave(): Promise<void>;
}
export declare class RoomSessionConnection extends BaseConnection<RoomSessionObjectEvents> implements BaseRoomInterface, RoomSessionConnectionContract {
    private _screenShareList;
    private _deviceList;
    private _mirrored;
    private _audioEl;
    constructor(options: BaseConnection<RoomSessionObjectEvents> & {
        mirrorLocalVideoOverlay: boolean;
    });
    get screenShareList(): RoomSessionScreenShare[];
    get deviceList(): RoomSessionDevice[];
    get interactivityMode(): "member" | "audience";
    get permissions(): string[];
    /**
     * This method will be called by `join()` right before the
     * `connect()` happens and it's a way for us to control
     * exactly when the workers are attached.
     * @internal
     */
    protected attachPreConnectWorkers(): void;
    /** @deprecated Use {@link startScreenShare} instead. */
    createScreenShareObject(opts?: CreateScreenShareObjectOptions): Promise<RoomSessionScreenShare>;
    /**
     * Allow sharing the screen within the room.
     */
    startScreenShare(opts?: StartScreenShareOptions): Promise<RoomSessionScreenShare>;
    /**
     * Allow to add a camera to the room.
     */
    addCamera(opts?: AddCameraOptions): Promise<RoomSessionDevice>;
    /**
     * Allow to add a microphone to the room.
     */
    addMicrophone(opts?: AddMicrophoneOptions): Promise<RoomSessionDevice>;
    /**
     * Allow to add additional devices to the room like cameras or microphones.
     */
    addDevice(opts?: AddDeviceOptions): Promise<RoomSessionDevice>;
    join(): Promise<BaseRoomSession<this>>;
    leave(): Promise<void>;
    updateSpeaker({ deviceId }: {
        deviceId: string;
    }): Promise<undefined>;
    private _attachSpeakerTrackListener;
    getAudioEl(): HTMLAudioElement & {
        sinkId?: string | undefined;
        setSinkId?: ((id: string) => Promise<void>) | undefined;
    };
    /** @internal */
    hangup(id?: string): Promise<void>;
    /** @internal */
    protected _finalize(): void;
    /**
     * @deprecated Use {@link getLayouts} instead. `getLayoutList` will
     * be removed in v3.0.0
     */
    getLayoutList(): any;
    /**
     * @deprecated Use {@link getMembers} instead. `getMemberList` will
     * be removed in v3.0.0
     */
    getMemberList(): any;
    /**
     * Local video stream overlay
     */
    get localOverlay(): {
        mirrored: boolean;
        setMirrored: (value: boolean) => void;
    };
    /** @internal */
    protected getSubscriptions(): ("camera.updated" | "camera.disconnected" | "microphone.updated" | "microphone.disconnected" | "speaker.updated" | "speaker.disconnected" | "layout.changed" | "member.joined" | "member.left" | "member.updated" | "member.updated.deaf" | "member.updated.visible" | "member.updated.audioMuted" | "member.updated.videoMuted" | "member.updated.inputVolume" | "member.updated.outputVolume" | "member.updated.inputSensitivity" | "member.talking" | "member.talking.started" | "member.talking.ended" | "member.talking.start" | "member.talking.stop" | "memberList.updated" | "member.updated.audio_muted" | "member.updated.video_muted" | "member.updated.input_volume" | "member.updated.output_volume" | "member.updated.input_sensitivity" | "room.started" | "room.subscribed" | "room.updated" | "room.ended" | "room.joined" | "room.left" | "media.connected" | "media.reconnecting" | "media.disconnected" | "room.audienceCount" | "track" | "recording.started" | "recording.updated" | "recording.ended" | "playback.started" | "playback.updated" | "playback.ended" | "active" | "answering" | "destroy" | "early" | "hangup" | "held" | "new" | "purge" | "recovering" | "requesting" | "ringing" | "trying" | "stream.started" | "stream.ended")[];
}
export declare const RoomSessionAPI: import("@signalwire/core").ConstructableType<RoomSessionConnection>;
/** @internal */
export declare const createBaseRoomSessionObject: <RoomSessionType>(params: BaseComponentOptions) => BaseRoomSession<RoomSessionType>;
//# sourceMappingURL=BaseRoomSession.d.ts.map