import { InternalVideoLayout } from '@signalwire/core';
declare const addSDKPrefix: (input: string) => string;
declare const buildVideo: () => HTMLVideoElement;
declare const waitForVideoReady: ({ element }: {
    element: HTMLVideoElement;
}) => Promise<void>;
export interface LocalOverlay {
    readonly id: string;
    status: 'hidden' | 'visible';
    domElement: HTMLDivElement | undefined;
    hide(): void;
    show(): void;
    setLocalOverlayMediaStream(stream: MediaStream): void;
    setLocalOverlayMirror(mirror?: boolean): void;
}
interface MakeLayoutChangedHandlerParams {
    localOverlay: LocalOverlay;
    rootElement: HTMLElement;
}
interface LayoutChangedHandlerParams {
    layout: InternalVideoLayout;
    myMemberId: string;
    localStream: MediaStream;
}
declare const makeLayoutChangedHandler: ({ localOverlay, rootElement }: MakeLayoutChangedHandlerParams) => ({ layout, myMemberId, localStream }: LayoutChangedHandlerParams) => Promise<void>;
declare const cleanupElement: (rootElement: HTMLElement) => void;
declare const setVideoMediaTrack: ({ track, element, }: {
    track: MediaStreamTrack;
    element: HTMLVideoElement;
}) => void;
declare const createRootElementResizeObserver: ({ video, rootElement, paddingWrapper, }: {
    video: HTMLVideoElement;
    rootElement: HTMLElement;
    paddingWrapper: HTMLDivElement;
}) => {
    start: () => void;
    stop: () => void;
};
export { buildVideo, cleanupElement, makeLayoutChangedHandler, setVideoMediaTrack, waitForVideoReady, addSDKPrefix, createRootElementResizeObserver, };
//# sourceMappingURL=videoElement.d.ts.map