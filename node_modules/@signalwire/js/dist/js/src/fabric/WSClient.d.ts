import { type UserOptions } from '@signalwire/core';
interface PushNotification {
    encryption_type: 'aes_256_gcm';
    notification_uuid: string;
    with_video: 'true' | 'false';
    incoming_caller_name: string;
    incoming_caller_id: string;
    tag: string;
    invite: string;
    title: string;
    type: 'call_invite';
    iv: string;
    version: string;
    decrypted: Record<string, any>;
}
interface WSClientOptions extends UserOptions {
    rootElement?: HTMLElement;
}
export declare class WSClient {
    options: WSClientOptions;
    private wsClient;
    private logger;
    constructor(options: WSClientOptions);
    connect(): Promise<import("../Client").Client<unknown>>;
    disconnect(): void;
    dial(params: {
        to: string;
        nodeId?: string;
    }): Promise<unknown>;
    handlePushNotification(payload: PushNotification): Promise<unknown>;
    private executeVertoSubscribe;
    updateToken(token: string): Promise<void>;
}
export {};
//# sourceMappingURL=WSClient.d.ts.map