"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.promoteDemoteWorker = void 0;
const core_1 = require("@signalwire/core");
const promoteDemoteWorker = function* (options) {
    (0, core_1.getLogger)().debug('promoteDemoteWorker started');
    const { channels, instance, initialState } = options;
    const { swEventChannel } = channels;
    const { rtcPeerId } = initialState;
    if (!rtcPeerId) {
        throw new Error('Missing rtcPeerId for promoteDemoteWorker');
    }
    const action = yield core_1.sagaEffects.take(swEventChannel, (action) => {
        if (action.type === 'video.member.promoted' ||
            action.type === 'video.member.demoted') {
            return action.payload.member_id === instance.memberId;
        }
        return false;
    });
    (0, core_1.getLogger)().debug('promoteDemoteWorker:', action.type, action.payload);
    yield core_1.sagaEffects.put(core_1.sessionActions.updateAuthState(action.payload.authorization));
    const authState = yield core_1.sagaEffects.select(core_1.selectors.getAuthState);
    if (!authState) {
        throw new Error(`Invalid authState for '${action.type}'`);
    }
    // TODO: use the new getJoinMediaParams in here
    const { audio_allowed, video_allowed } = authState;
    switch (action.type) {
        case 'video.member.promoted':
            /**
             * Promote means enable the media allowed and keep the
             * same recv settings. (do not force recv media)
             */
            instance.updateMediaOptions({
                audio: audio_allowed === 'both',
                video: video_allowed === 'both',
                negotiateAudio: audio_allowed !== 'none',
                negotiateVideo: video_allowed !== 'none',
            });
            break;
        case 'video.member.demoted':
            /**
             * Demote means force recvonly and receive only the media allowed.
             */
            instance.updateMediaOptions({
                audio: false,
                video: false,
                negotiateAudio: audio_allowed !== 'none',
                negotiateVideo: video_allowed !== 'none',
            });
            break;
    }
    instance._triggerNewRTCPeer();
    (0, core_1.getLogger)().debug('promoteDemoteWorker ended', rtcPeerId);
};
exports.promoteDemoteWorker = promoteDemoteWorker;
//# sourceMappingURL=promoteDemoteWorker.js.map