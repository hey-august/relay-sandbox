"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._getMediaDeviceKindByName = exports.stopTrack = exports.stopStream = exports.sdpToJsonHack = exports.setMediaElementSinkId = exports.supportsMediaOutput = exports.streamIsValid = exports.getSupportedConstraints = exports.supportsGetDisplayMedia = exports.supportsGetUserMedia = exports.getMediaDevicesApi = exports.supportsMediaDevices = exports.RTCPeerConnection = void 0;
const react_native_webrtc_1 = require("react-native-webrtc");
const RTCPeerConnection = (config) => {
    var _a;
    const _config = ((_a = Object.keys(config)) === null || _a === void 0 ? void 0 : _a.length) ? config : null;
    return new react_native_webrtc_1.RTCPeerConnection(_config);
};
exports.RTCPeerConnection = RTCPeerConnection;
/**
 * Returns whether the current environment supports the media devices API.
 */
const supportsMediaDevices = () => {
    return !!react_native_webrtc_1.mediaDevices;
};
exports.supportsMediaDevices = supportsMediaDevices;
/**
 * Returns the mediaDevices object if supported, otherwise throws an error.
 */
const getMediaDevicesApi = () => {
    if (!(0, exports.supportsMediaDevices)()) {
        throw new Error("The media devices API isn't supported in this environment");
    }
    return react_native_webrtc_1.mediaDevices;
};
exports.getMediaDevicesApi = getMediaDevicesApi;
/**
 * Returns whether the current environment supports `getUserMedia`.
 */
const supportsGetUserMedia = () => {
    return typeof (0, exports.getMediaDevicesApi)().getUserMedia === 'function';
};
exports.supportsGetUserMedia = supportsGetUserMedia;
/**
 * Returns whether the current environment supports `getDisplayMedia`.
 */
const supportsGetDisplayMedia = () => {
    return typeof (0, exports.getMediaDevicesApi)().getDisplayMedia === 'function';
};
exports.supportsGetDisplayMedia = supportsGetDisplayMedia;
/**
 * Returns a dictionary whose fields specify the constrainable properties the user agent understands.
 * Not supported on React Native
 */
const getSupportedConstraints = () => ({});
exports.getSupportedConstraints = getSupportedConstraints;
const streamIsValid = (stream) => stream && stream instanceof react_native_webrtc_1.MediaStream;
exports.streamIsValid = streamIsValid;
/**
 * Returns whether the current environment supports the selection of a media output device.
 * Not supported in React Native.
 */
const supportsMediaOutput = () => {
    return false;
};
exports.supportsMediaOutput = supportsMediaOutput;
const setMediaElementSinkId = (_htmlElementId, _deviceId) => Promise.resolve(false);
exports.setMediaElementSinkId = setMediaElementSinkId;
const sdpToJsonHack = (sdp) => {
    Object.defineProperty(sdp, 'toJSON', { value: () => sdp });
    return sdp;
};
exports.sdpToJsonHack = sdpToJsonHack;
const stopStream = (stream) => {
    var _a;
    if ((0, exports.streamIsValid)(stream)) {
        (_a = stream === null || stream === void 0 ? void 0 : stream.getTracks()) === null || _a === void 0 ? void 0 : _a.forEach(exports.stopTrack);
    }
    stream = null;
};
exports.stopStream = stopStream;
/**
 * This class in implemented by `react-native-webrtc` but
 * it's not exported directly. To avoid dealing with manual
 * file imports and having (potential) issues of mixing
 * commonjs/esm we ported it here since it's just a few
 * lines of code.
 */
class MediaStreamTrackEvent {
    constructor(type, eventInitDict) {
        this.type = type.toString();
        this.track = eventInitDict.track;
    }
}
const stopTrack = (track) => {
    if (track && track.readyState === 'live') {
        track.stop();
        track.dispatchEvent(
        // @ts-expect-error
        new MediaStreamTrackEvent('ended', { track }));
    }
};
exports.stopTrack = stopTrack;
/**
 * Maps permission's names from `DevicePermissionDescriptor["name"]`
 * to `MediaDeviceKind`
 */
const PERMISSIONS_MAPPING = {
    camera: 'videoinput',
    microphone: 'audioinput',
    speaker: 'audiooutput',
};
const _getMediaDeviceKindByName = (name) => {
    if (!name) {
        return undefined;
    }
    return PERMISSIONS_MAPPING[name];
};
exports._getMediaDeviceKindByName = _getMediaDeviceKindByName;
//# sourceMappingURL=primitives.native.js.map