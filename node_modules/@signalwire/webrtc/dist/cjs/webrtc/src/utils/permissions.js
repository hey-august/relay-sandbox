"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkSpeakerPermissions = exports.checkMicrophonePermissions = exports.checkCameraPermissions = exports.checkPermissions = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@signalwire/core");
const primitives_1 = require("./primitives");
const enumerateDevices_1 = require("./enumerateDevices");
/**
 * For browsers not supporting the Permissions API
 * @param {string} kind
 * @returns
 */
const _legacyCheckPermissions = (kind) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const devices = yield (0, enumerateDevices_1.enumerateDevicesByKind)(kind);
    if (!devices.length) {
        (0, core_1.getLogger)().warn(`No ${kind} devices to check for permissions!`);
        return null;
    }
    return devices.every(({ deviceId, label }) => Boolean(deviceId && label));
});
/**
 * Asynchronously returns whether we have permissions to access the specified
 * resource. Some common parameter values for `name` are `"camera"`,
 * `"microphone"`, and `"speaker"`. In those cases, prefer the dedicated methods
 * {@link checkCameraPermissions}, {@link checkMicrophonePermissions}, and
 * {@link checkSpeakerPermissions}.
 * @param name name of the resource
 *
 * @example
 * ```typescript
 * await SignalWire.WebRTC.checkPermissions("camera")
 * // true: we have permission for using the camera
 * ```
 */
const checkPermissions = (name) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if ('permissions' in navigator &&
        typeof navigator.permissions.query === 'function' &&
        name) {
        try {
            /**
             * `navigator.permissions.query` can throw if `name` is not a
             * valid enumation value for `PermissionName`. As of today, some
             * browsers like Fireforx will throw with `name: "camera"`
             */
            // @ts-expect-error
            const status = yield navigator.permissions.query({ name });
            return status.state === 'granted';
        }
        catch (e) { }
    }
    return _legacyCheckPermissions((0, primitives_1._getMediaDeviceKindByName)(name));
});
exports.checkPermissions = checkPermissions;
/**
 * Asynchronously returns whether we have permissions to access the camera.
 *
 * @example
 * ```typescript
 * await SignalWire.WebRTC.checkCameraPermissions()
 * // true
 * ```
 */
const checkCameraPermissions = () => (0, exports.checkPermissions)('camera');
exports.checkCameraPermissions = checkCameraPermissions;
/**
 * Asynchronously returns whether we have permissions to access the microphone.
 *
 * @example
 * ```typescript
 * await SignalWire.WebRTC.checkMicrophonePermissions()
 * // true
 * ```
 */
const checkMicrophonePermissions = () => (0, exports.checkPermissions)('microphone');
exports.checkMicrophonePermissions = checkMicrophonePermissions;
/**
 * Asynchronously returns whether we have permissions to access the speakers.
 *
 * @example
 * ```typescript
 * await SignalWire.WebRTC.checkSpeakerPermissions()
 * // true
 * ```
 */
const checkSpeakerPermissions = () => (0, exports.checkPermissions)('speaker');
exports.checkSpeakerPermissions = checkSpeakerPermissions;
//# sourceMappingURL=permissions.js.map