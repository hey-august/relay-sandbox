"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMediaConstraints = exports.getUserMedia = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@signalwire/core");
const getUserMedia_1 = require("./getUserMedia");
const deviceHelpers_1 = require("./deviceHelpers");
// FIXME: Remove and use getUserMedia directly
const getUserMedia = (constraints) => {
    (0, core_1.getLogger)().info('RTCService.getUserMedia', constraints);
    const { audio, video } = constraints;
    if (!audio && !video) {
        return;
    }
    return (0, getUserMedia_1.getUserMedia)(constraints);
};
exports.getUserMedia = getUserMedia;
const getMediaConstraints = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    let { audio = true, micId } = options;
    const { micLabel = '' } = options;
    if (micId) {
        const newMicId = yield (0, deviceHelpers_1.assureDeviceId)(micId, micLabel, 'microphone').catch((_error) => null);
        if (newMicId) {
            if (typeof audio === 'boolean') {
                audio = {};
            }
            audio.deviceId = { exact: newMicId };
        }
    }
    let { video = false, camId } = options;
    const { camLabel = '' } = options;
    if (camId) {
        const newCamId = yield (0, deviceHelpers_1.assureDeviceId)(camId, camLabel, 'camera').catch((_error) => null);
        if (newCamId) {
            if (typeof video === 'boolean') {
                video = {};
            }
            video.deviceId = { exact: newCamId };
        }
    }
    return { audio, video };
});
exports.getMediaConstraints = getMediaConstraints;
//# sourceMappingURL=helpers.js.map