"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const _1 = require("./");
const constants_1 = require("./constants");
describe('checkWebSocketHost', () => {
    it('should add wss protocol if not present', () => {
        expect((0, _1.checkWebSocketHost)('example.com')).toEqual('wss://example.com');
        expect((0, _1.checkWebSocketHost)('test.example.com:8082')).toEqual('wss://test.example.com:8082');
    });
    it('should do nothing if protocol is already present', () => {
        expect((0, _1.checkWebSocketHost)('ws://example.com')).toEqual('ws://example.com');
        expect((0, _1.checkWebSocketHost)('ws://example.com:8082')).toEqual('ws://example.com:8082');
        expect((0, _1.checkWebSocketHost)('wss://test.example.com')).toEqual('wss://test.example.com');
        expect((0, _1.checkWebSocketHost)('wss://test.example.com:8082')).toEqual('wss://test.example.com:8082');
    });
});
describe('timeoutPromise', () => {
    it('should resolve successfully without timeout', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const promise = Promise.resolve('value');
        const error = 'ERROR';
        const result = yield (0, _1.timeoutPromise)(promise, 5, error);
        expect(result).toBe('value');
    }));
    it('should reject in case of timeout', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const promise = new Promise(() => null);
        const error = 'ERROR';
        yield expect((0, _1.timeoutPromise)(promise, 5, error)).rejects.toEqual(error);
    }));
});
describe('validateEventsToSubscribe', () => {
    it('should be no-op for valid event list', () => {
        const first = [
            'member.joined',
            'random.event.camelCase',
            'random.event.snake_case',
        ];
        expect((0, _1.validateEventsToSubscribe)(first)).toStrictEqual(first);
        const second = [
            'video.member.joined',
            'video.random.event.camelCase',
            'video.random.event.snake_case',
            'video.layout.changed',
            'video.member.updated',
            'video.member.left',
        ];
        expect((0, _1.validateEventsToSubscribe)(second)).toStrictEqual(second);
    });
    it('should check for custom-events', () => {
        const events = [
            'video.member.joined',
            'video.member.updated.videoMuted',
            'video.member.updated.visible',
        ];
        expect((0, _1.validateEventsToSubscribe)(events)).toStrictEqual([
            'video.member.joined',
            'video.member.updated',
        ]);
    });
    it('should check for custom-events and make it unique', () => {
        const events = [
            'video.member.joined',
            'video.member.updated',
            'video.member.updated.videoMuted',
            'video.member.updated.visible',
        ];
        expect((0, _1.validateEventsToSubscribe)(events)).toStrictEqual([
            'video.member.joined',
            'video.member.updated',
        ]);
    });
    it('should cleanup namespaced events', () => {
        const events = [
            '1111-2222-3333-4444:video.member.joined',
            '12345:video.member.updated',
            'video.member.ns_one',
            'video.member.ns_two',
        ];
        expect((0, _1.validateEventsToSubscribe)(events)).toStrictEqual([
            'video.member.joined',
            'video.member.updated',
            'video.member.ns_one',
            'video.member.ns_two',
        ]);
    });
    it('should remove client-side events', () => {
        const events = [
            '1111-2222-3333-4444:video.member.joined',
            '12345:video.member.updated.audioMuted',
            'video.track',
            'video.active',
            'video.ringing',
        ];
        expect((0, _1.validateEventsToSubscribe)(events)).toStrictEqual([
            'video.member.joined',
            'video.member.updated',
        ]);
    });
});
describe('toLocalEvent', () => {
    it('should convert the event to our local event syntax', () => {
        expect((0, _1.toLocalEvent)('video.room.started')).toEqual(`video.${constants_1.LOCAL_EVENT_PREFIX}.room.started`);
    });
});
describe('isLocalEvent', () => {
    it('should identify when an event is local', () => {
        expect((0, _1.isLocalEvent)((0, _1.toLocalEvent)('video.room.started'))).toBeTruthy();
        expect((0, _1.isLocalEvent)('video.room.started')).toBeFalsy();
    });
});
//# sourceMappingURL=index.test.js.map