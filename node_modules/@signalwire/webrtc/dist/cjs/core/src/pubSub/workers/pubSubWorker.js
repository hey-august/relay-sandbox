"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pubSubWorker = void 0;
const tslib_1 = require("tslib");
const constants_1 = require("../../utils/constants");
const index_1 = require("../../index");
const pubSubWorker = function* (options) {
    (0, index_1.getLogger)().trace('pubSubWorker started');
    const { instance: client, channels: { swEventChannel }, } = options;
    function* worker(action) {
        const { type, payload } = action;
        switch (type) {
            case `${constants_1.PRODUCT_PREFIX_PUBSUB}.channel.message`: {
                const { channel } = payload, 
                /**
                 * Since we're using the same event as `Chat`
                 * the payload comes with a `member` prop. To
                 * avoid confusion (since `PubSub` doesn't
                 * have members) we'll remove it from the
                 * payload sent to the end user.
                 */
                // @ts-expect-error
                _a = payload.message, 
                /**
                 * Since we're using the same event as `Chat`
                 * the payload comes with a `member` prop. To
                 * avoid confusion (since `PubSub` doesn't
                 * have members) we'll remove it from the
                 * payload sent to the end user.
                 */
                // @ts-expect-error
                { member } = _a, restMessage = tslib_1.__rest(_a, ["member"]);
                const externalJSON = (0, index_1.toExternalJSON)(Object.assign(Object.assign({}, restMessage), { channel }));
                const pubSubMessage = new index_1.PubSubMessage(externalJSON);
                client.emit('message', pubSubMessage);
                break;
            }
            default:
                (0, index_1.getLogger)().warn(`Unknown pubsub event: "${type}"`);
                break;
        }
    }
    const isPubSubEvent = (action) => action.type.startsWith(`${constants_1.PRODUCT_PREFIX_PUBSUB}.`);
    while (true) {
        const action = yield index_1.sagaEffects.take(swEventChannel, isPubSubEvent);
        yield index_1.sagaEffects.fork(worker, action);
    }
    (0, index_1.getLogger)().trace('pubSubWorker ended');
};
exports.pubSubWorker = pubSubWorker;
//# sourceMappingURL=pubSubWorker.js.map