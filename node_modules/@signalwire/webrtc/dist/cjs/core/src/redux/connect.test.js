"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testUtils_1 = require("../testUtils");
const BaseComponent_1 = require("../BaseComponent");
const connect_1 = require("./connect");
const features_1 = require("./features");
const EventEmitter_1 = require("../utils/EventEmitter");
describe('Connect', () => {
    let store;
    let instance;
    let updateStateAction;
    let updateRemoteSDPAction;
    const mockOnRemoteSDP = jest.fn();
    Object.defineProperties(BaseComponent_1.BaseComponent.prototype, {
        onAuth: {
            value: jest.fn(),
        },
        checkRaceOne: {
            value: jest.fn(),
        },
        checkRaceTwo: {
            value: jest.fn(),
        },
    });
    beforeEach(() => {
        store = (0, testUtils_1.configureJestStore)();
        instance = (0, connect_1.connect)({
            store,
            sessionListeners: {
                authStatus: 'onAuth',
            },
            Component: BaseComponent_1.BaseComponent,
        })({
            emitter: new EventEmitter_1.EventEmitter(),
        });
        instance.onAuth.mockClear();
        instance.emit = jest.fn();
        mockOnRemoteSDP.mockClear();
        updateStateAction = features_1.componentActions.upsert({
            id: instance.__uuid,
            state: 'active',
        });
        updateRemoteSDPAction = features_1.componentActions.upsert({
            id: instance.__uuid,
            remoteSDP: '<SDP>',
        });
    });
    it('should unsubscribe after destroy', () => {
        store.dispatch(updateStateAction);
        instance.destroy();
        instance.emit.mockClear();
        store.dispatch(updateStateAction);
        expect(instance.emit).not.toHaveBeenCalled();
    });
    it('should not invoke the instance method if something else in redux changed', () => {
        store.dispatch(updateRemoteSDPAction);
        expect(instance.emit).not.toHaveBeenCalled();
    });
    it('should invoke the function within sessionListeners', () => {
        store.dispatch(features_1.sessionActions.authStatus('authorized'));
        expect(instance.onAuth).toHaveBeenCalledTimes(1);
        expect(instance.onAuth).toHaveBeenCalledWith({
            protocol: '',
            iceServers: [],
            authStatus: 'authorized',
            authError: undefined,
            authCount: 0,
        });
    });
});
//# sourceMappingURL=connect.test.js.map