"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSlice = void 0;
const _1 = require(".");
const createReducer_1 = require("./createReducer");
const mapBuilders_1 = require("./mapBuilders");
function getType(slice, actionKey) {
    return `${slice}/${actionKey}`;
}
/**
 * A function that accepts an initial state, an object full of reducer
 * functions, and a "slice name", and automatically generates
 * action creators and action types that correspond to the
 * reducers and state.
 *
 * The `reducer` argument is passed to `createReducer()`.
 *
 * @public
 */
function createSlice(options) {
    const { name } = options;
    if (!name) {
        throw new Error('`name` is a required option for createSlice');
    }
    // const initialState =
    //   typeof options.initialState == 'function'
    //     ? options.initialState
    //     : createNextState(options.initialState, () => {})
    const initialState = options.initialState;
    const reducers = options.reducers || {};
    const reducerNames = Object.keys(reducers);
    const sliceCaseReducersByName = {};
    const sliceCaseReducersByType = {};
    const actionCreators = {};
    reducerNames.forEach((reducerName) => {
        const maybeReducerWithPrepare = reducers[reducerName];
        const type = getType(name, reducerName);
        let caseReducer;
        let prepareCallback;
        if ('reducer' in maybeReducerWithPrepare) {
            caseReducer = maybeReducerWithPrepare.reducer;
            prepareCallback = maybeReducerWithPrepare.prepare;
        }
        else {
            caseReducer = maybeReducerWithPrepare;
        }
        sliceCaseReducersByName[reducerName] = caseReducer;
        sliceCaseReducersByType[type] = caseReducer;
        actionCreators[reducerName] = prepareCallback
            ? (0, _1.createAction)(type, prepareCallback)
            : (0, _1.createAction)(type);
    });
    function buildReducer() {
        const [extraReducers = {}, actionMatchers = [], defaultCaseReducer = undefined,] = typeof options.extraReducers === 'function'
            ? (0, mapBuilders_1.executeReducerBuilderCallback)(options.extraReducers)
            : [options.extraReducers];
        const finalCaseReducers = Object.assign(Object.assign({}, extraReducers), sliceCaseReducersByType);
        return (0, createReducer_1.createReducer)(initialState, finalCaseReducers, actionMatchers, defaultCaseReducer);
    }
    let _reducer;
    return {
        name,
        reducer(state, action) {
            if (!_reducer)
                _reducer = buildReducer();
            return _reducer(state, action);
        },
        actions: actionCreators,
        caseReducers: sliceCaseReducersByName,
        getInitialState() {
            if (!_reducer)
                _reducer = buildReducer();
            return _reducer.getInitialState();
        },
    };
}
exports.createSlice = createSlice;
//# sourceMappingURL=createSlice.js.map