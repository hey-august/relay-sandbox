"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureStore = exports.connect = void 0;
const tslib_1 = require("tslib");
const core_1 = tslib_1.__importStar(require("@redux-saga/core"));
const toolkit_1 = require("./toolkit");
const rootReducer_1 = require("./rootReducer");
const rootSaga_1 = tslib_1.__importDefault(require("./rootSaga"));
const connect_1 = require("./connect");
Object.defineProperty(exports, "connect", { enumerable: true, get: function () { return connect_1.connect; } });
const useSession_1 = require("./utils/useSession");
const useInstanceMap_1 = require("./utils/useInstanceMap");
const configureStore = (options) => {
    var _a;
    const { userOptions, SessionConstructor, preloadedState = {}, runSagaMiddleware = true, } = options;
    const sagaMiddleware = (0, core_1.default)();
    const swEventChannel = (0, core_1.multicastChannel)();
    const sessionChannel = (0, core_1.channel)();
    /**
     * List of channels that are gonna be shared across all
     * sagas.
     */
    const channels = {
        swEventChannel,
        sessionChannel,
    };
    const store = (0, toolkit_1.configureStore)({
        devTools: (_a = userOptions === null || userOptions === void 0 ? void 0 : userOptions.devTools) !== null && _a !== void 0 ? _a : true,
        reducer: rootReducer_1.rootReducer,
        preloadedState,
        middleware: (getDefaultMiddleware) => 
        // It is preferrable to use the chainable .concat(...) and
        // .prepend(...) methods of the returned MiddlewareArray instead
        // of the array spread operator, as the latter can lose valuable
        // type information under some circumstances.
        // @see https://redux-toolkit.js.org/api/getDefaultMiddleware#intended-usage
        getDefaultMiddleware().concat(sagaMiddleware),
    });
    const { initSession, getSession, sessionEmitter } = (0, useSession_1.useSession)({
        userOptions,
        sessionChannel,
        SessionConstructor,
    });
    const map = (0, useInstanceMap_1.useInstanceMap)();
    const runSaga = (saga, args) => {
        return sagaMiddleware.run(saga, Object.assign(Object.assign({}, args), { channels,
            getSession, instanceMap: map }));
    };
    if (runSagaMiddleware) {
        const saga = (0, rootSaga_1.default)({
            initSession,
            sessionEmitter,
        });
        sagaMiddleware.run(saga, { userOptions, channels });
    }
    return Object.assign(Object.assign({}, store), { runSaga,
        channels, instanceMap: map, sessionEmitter });
};
exports.configureStore = configureStore;
tslib_1.__exportStar(require("./actions"), exports);
tslib_1.__exportStar(require("./utils/sagaHelpers"), exports);
tslib_1.__exportStar(require("./toolkit"), exports);
//# sourceMappingURL=index.js.map