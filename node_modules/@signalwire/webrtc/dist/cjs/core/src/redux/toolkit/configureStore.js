"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureStore = void 0;
const tslib_1 = require("tslib");
const redux_1 = require("redux");
const devtoolsExtension_1 = require("./devtoolsExtension");
const isPlainObject_1 = tslib_1.__importDefault(require("./isPlainObject"));
const getDefaultMiddleware_1 = require("./getDefaultMiddleware");
const IS_PRODUCTION = process.env.NODE_ENV === 'production';
/**
 * A friendly abstraction over the standard Redux `createStore()` function.
 *
 * @param config The store configuration.
 * @returns A configured Redux store.
 *
 * @public
 */
function configureStore(options) {
    const curriedGetDefaultMiddleware = (0, getDefaultMiddleware_1.curryGetDefaultMiddleware)();
    const { reducer = undefined, middleware = curriedGetDefaultMiddleware(), devTools = true, preloadedState = undefined, enhancers = undefined, } = options || {};
    let rootReducer;
    if (typeof reducer === 'function') {
        rootReducer = reducer;
    }
    else if ((0, isPlainObject_1.default)(reducer)) {
        rootReducer = (0, redux_1.combineReducers)(reducer);
    }
    else {
        throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');
    }
    let finalMiddleware = middleware;
    if (typeof finalMiddleware === 'function') {
        finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);
        if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {
            throw new Error('when using a middleware builder function, an array of middleware must be returned');
        }
    }
    if (!IS_PRODUCTION &&
        finalMiddleware.some((item) => typeof item !== 'function')) {
        throw new Error('each middleware provided to configureStore must be a function');
    }
    const middlewareEnhancer = (0, redux_1.applyMiddleware)(...finalMiddleware);
    let finalCompose = redux_1.compose;
    if (devTools) {
        finalCompose = (0, devtoolsExtension_1.composeWithDevTools)(Object.assign({ 
            // Enable capture of stack traces for dispatched Redux actions
            trace: !IS_PRODUCTION }, (typeof devTools === 'object' && devTools)));
    }
    let storeEnhancers = [middlewareEnhancer];
    if (Array.isArray(enhancers)) {
        storeEnhancers = [middlewareEnhancer, ...enhancers];
    }
    else if (typeof enhancers === 'function') {
        storeEnhancers = enhancers(storeEnhancers);
    }
    const composedEnhancer = finalCompose(...storeEnhancers);
    return (0, redux_1.createStore)(rootReducer, preloadedState, composedEnhancer);
}
exports.configureStore = configureStore;
//# sourceMappingURL=configureStore.js.map