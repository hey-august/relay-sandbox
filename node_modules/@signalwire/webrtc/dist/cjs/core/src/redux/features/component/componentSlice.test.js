"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testUtils_1 = require("../../../testUtils");
const componentSlice_1 = require("./componentSlice");
const componentSelectors_1 = require("./componentSelectors");
const actions_1 = require("../../actions");
describe('ComponentState Tests', () => {
    let store;
    const componentId = '268b4cf8-a3c5-4003-8666-3b7a4f0a5af9';
    const component = {
        id: componentId,
    };
    beforeEach(() => {
        store = (0, testUtils_1.configureJestStore)();
    });
    describe('update action', () => {
        it('should create a new entry if the id is not in the state', () => {
            expect((0, componentSelectors_1.getComponent)(store.getState(), componentId)).toBeUndefined();
            store.dispatch(componentSlice_1.componentActions.upsert(component));
            expect((0, componentSelectors_1.getComponent)(store.getState(), componentId)).toStrictEqual({
                id: '268b4cf8-a3c5-4003-8666-3b7a4f0a5af9',
            });
        });
        it('should update the state properly', () => {
            store.dispatch(componentSlice_1.componentActions.upsert(component));
            expect((0, componentSelectors_1.getComponent)(store.getState(), componentId)).toStrictEqual({
                id: '268b4cf8-a3c5-4003-8666-3b7a4f0a5af9',
            });
            store.dispatch(componentSlice_1.componentActions.upsert(Object.assign(Object.assign({}, component), { state: 'active' })));
            expect((0, componentSelectors_1.getComponent)(store.getState(), componentId)).toStrictEqual({
                id: '268b4cf8-a3c5-4003-8666-3b7a4f0a5af9',
                state: 'active',
            });
        });
    });
    describe('cleanup action', () => {
        const s = (0, testUtils_1.configureJestStore)({
            preloadedState: {
                components: {
                    byId: {
                        '268b4cf8-a3c5-4003-8666-3b7a4f0a5af9': {
                            id: '268b4cf8-a3c5-4003-8666-3b7a4f0a5af9',
                        },
                        'faa63915-3a64-4c39-acbb-06dac0758f8a': {
                            id: 'faa63915-3a64-4c39-acbb-06dac0758f8a',
                            responses: {},
                        },
                        'zfaa63915-3a64-4c39-acbb-06dac0758f8a': {
                            id: 'zfaa63915-3a64-4c39-acbb-06dac0758f8a',
                            errors: {},
                        },
                    },
                },
            },
        });
        s.dispatch(componentSlice_1.componentActions.cleanup(Object.assign(Object.assign({}, component), { ids: [
                '268b4cf8-a3c5-4003-8666-3b7a4f0a5af9',
                'faa63915-3a64-4c39-acbb-06dac0758f8a',
            ] })));
        expect((0, componentSelectors_1.getComponentsById)(s.getState())).toStrictEqual({
            'zfaa63915-3a64-4c39-acbb-06dac0758f8a': {
                id: 'zfaa63915-3a64-4c39-acbb-06dac0758f8a',
                errors: {},
            },
        });
    });
    it('should reset to initial on destroyAction', () => {
        // Create some components first
        store.dispatch(componentSlice_1.componentActions.upsert(component));
        store.dispatch(componentSlice_1.componentActions.upsert({
            id: 'random',
        }));
        store.dispatch((0, actions_1.destroyAction)());
        expect(store.getState().components).toStrictEqual(componentSlice_1.initialComponentState);
    });
});
//# sourceMappingURL=componentSlice.test.js.map