"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const redux_saga_test_plan_1 = require("redux-saga-test-plan");
const testUtils_1 = require("../../../testUtils");
const componentSaga_1 = require("./componentSaga");
const rootReducer_1 = require("../../rootReducer");
describe('componentCleanupSaga', () => {
    let store;
    beforeEach(() => {
        store = (0, testUtils_1.configureJestStore)({
            preloadedState: {
                components: {
                    byId: {
                        '268b4cf8-a3c5-4003-8666-3b7a4f0a5af9': {
                            id: '268b4cf8-a3c5-4003-8666-3b7a4f0a5af9',
                        },
                        'faa63915-3a64-4c39-acbb-06dac0758f8a': {
                            id: 'faa63915-3a64-4c39-acbb-06dac0758f8a',
                            responses: {},
                        },
                        'zfaa63915-3a64-4c39-acbb-06dac0758f8a': {
                            id: 'zfaa63915-3a64-4c39-acbb-06dac0758f8a',
                            errors: {},
                        },
                    },
                },
            },
        });
    });
    it('should cleanup unused components from the store', () => {
        return (0, redux_saga_test_plan_1.expectSaga)(componentSaga_1.componentCleanupSagaWorker)
            .withReducer(rootReducer_1.rootReducer, store.getState())
            .hasFinalState({
            components: {
                byId: {
                    '268b4cf8-a3c5-4003-8666-3b7a4f0a5af9': {
                        id: '268b4cf8-a3c5-4003-8666-3b7a4f0a5af9',
                    },
                },
            },
            session: {
                protocol: '',
                iceServers: [],
                authStatus: 'unknown',
                authState: undefined,
                authError: undefined,
                authCount: 0,
            },
        })
            .run();
    });
});
//# sourceMappingURL=componentSaga.test.js.map