"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jest_websocket_mock_1 = tslib_1.__importDefault(require("jest-websocket-mock"));
const BaseJWTSession_1 = require("./BaseJWTSession");
const RPCMessages_1 = require("./RPCMessages");
const utils_1 = require("./utils");
class JWTSession extends BaseJWTSession_1.BaseJWTSession {
    constructor() {
        super(...arguments);
        this.WebSocketConstructor = WebSocket;
        this.CloseEventConstructor = utils_1.SWCloseEvent;
    }
}
jest.mock('uuid', () => {
    return {
        v4: jest.fn(() => 'mocked-uuid'),
    };
});
describe('JWTSession', () => {
    const host = 'ws://localhost:8080';
    const token = '<jwt>';
    const rpcConnect = (0, RPCMessages_1.RPCConnect)({
        authentication: {
            jwt_token: token,
        },
    });
    let ws;
    let session;
    beforeEach(() => {
        ws = new jest_websocket_mock_1.default(host);
        // Respond to RPCs
        ws.on('connection', (socket) => {
            socket.on('message', (data) => {
                const parsedData = JSON.parse(data);
                socket.send(JSON.stringify({
                    jsonrpc: '2.0',
                    id: parsedData.id,
                    result: {},
                }));
            });
        });
        session = new JWTSession({
            host,
            token,
        });
        session.dispatch = jest.fn();
    });
    afterEach(() => {
        jest_websocket_mock_1.default.clean();
    });
    it('should connect connect and disconnect to/from the provided host', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        session.connect();
        yield ws.connected;
        expect(session.connected).toBe(true);
        yield expect(ws).toReceiveMessage(JSON.stringify(rpcConnect));
        session.disconnect();
        expect(session.connected).toBe(false);
        expect(session.closed).toBe(true);
    }));
    it('should try to connect with jwt_token on socket open', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        session.connect();
        yield ws.connected;
        yield expect(ws).toReceiveMessage(JSON.stringify(rpcConnect));
    }));
});
//# sourceMappingURL=BaseJWTSession.test.js.map