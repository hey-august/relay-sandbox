"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRoomSessionPlaybackObject = exports.RoomSessionPlaybackAPI = void 0;
const tslib_1 = require("tslib");
const redux_1 = require("../redux");
const BaseComponent_1 = require("../BaseComponent");
class RoomSessionPlaybackAPI extends BaseComponent_1.BaseComponent {
    constructor(options) {
        super(options);
        this._payload = options.payload;
    }
    get id() {
        return this._payload.playback.id;
    }
    get roomId() {
        return this._payload.room_id;
    }
    get roomSessionId() {
        return this._payload.room_session_id;
    }
    get url() {
        return this._payload.playback.url;
    }
    get state() {
        return this._payload.playback.state;
    }
    get volume() {
        return this._payload.playback.volume;
    }
    get startedAt() {
        if (!this._payload.playback.started_at)
            return undefined;
        return new Date(this._payload.playback.started_at * 1000);
    }
    get endedAt() {
        if (!this._payload.playback.ended_at)
            return undefined;
        return new Date(this._payload.playback.ended_at * 1000);
    }
    get position() {
        return this._payload.playback.position;
    }
    get seekable() {
        return this._payload.playback.seekable;
    }
    /** @internal */
    setPayload(payload) {
        this._payload = payload;
    }
    pause() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.execute({
                method: 'video.playback.pause',
                params: {
                    room_session_id: this.getStateProperty('roomSessionId'),
                    playback_id: this.getStateProperty('id'),
                },
            });
        });
    }
    resume() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.execute({
                method: 'video.playback.resume',
                params: {
                    room_session_id: this.getStateProperty('roomSessionId'),
                    playback_id: this.getStateProperty('id'),
                },
            });
        });
    }
    stop() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.execute({
                method: 'video.playback.stop',
                params: {
                    room_session_id: this.getStateProperty('roomSessionId'),
                    playback_id: this.getStateProperty('id'),
                },
            });
        });
    }
    setVolume(volume) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.execute({
                method: 'video.playback.set_volume',
                params: {
                    room_session_id: this.getStateProperty('roomSessionId'),
                    playback_id: this.getStateProperty('id'),
                    volume,
                },
            });
        });
    }
    seek(timecode) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.execute({
                method: 'video.playback.seek_absolute',
                params: {
                    room_session_id: this.getStateProperty('roomSessionId'),
                    playback_id: this.getStateProperty('id'),
                    position: Math.abs(timecode),
                },
            });
        });
    }
    forward(offset = 5000) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.execute({
                method: 'video.playback.seek_relative',
                params: {
                    room_session_id: this.getStateProperty('roomSessionId'),
                    playback_id: this.getStateProperty('id'),
                    position: Math.abs(offset),
                },
            });
        });
    }
    rewind(offset = 5000) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.execute({
                method: 'video.playback.seek_relative',
                params: {
                    room_session_id: this.getStateProperty('roomSessionId'),
                    playback_id: this.getStateProperty('id'),
                    position: -Math.abs(offset),
                },
            });
        });
    }
}
exports.RoomSessionPlaybackAPI = RoomSessionPlaybackAPI;
const createRoomSessionPlaybackObject = (params) => {
    const playback = (0, redux_1.connect)({
        store: params.store,
        Component: RoomSessionPlaybackAPI,
    })(params);
    return playback;
};
exports.createRoomSessionPlaybackObject = createRoomSessionPlaybackObject;
//# sourceMappingURL=RoomSessionPlayback.js.map