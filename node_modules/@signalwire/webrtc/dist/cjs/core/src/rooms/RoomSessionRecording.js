"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRoomSessionRecordingObject = exports.RoomSessionRecordingAPI = void 0;
const tslib_1 = require("tslib");
const redux_1 = require("../redux");
const BaseComponent_1 = require("../BaseComponent");
class RoomSessionRecordingAPI extends BaseComponent_1.BaseComponent {
    constructor(options) {
        super(options);
        this._payload = options.payload;
    }
    get id() {
        return this._payload.recording.id;
    }
    get roomId() {
        return this._payload.room_id;
    }
    get roomSessionId() {
        return this._payload.room_session_id;
    }
    get state() {
        return this._payload.recording.state;
    }
    get duration() {
        return this._payload.recording.duration;
    }
    get startedAt() {
        if (!this._payload.recording.started_at)
            return undefined;
        return new Date(this._payload.recording.started_at * 1000);
    }
    get endedAt() {
        if (!this._payload.recording.ended_at)
            return undefined;
        return new Date(this._payload.recording.ended_at * 1000);
    }
    /** @internal */
    setPayload(payload) {
        this._payload = payload;
    }
    pause() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.execute({
                method: 'video.recording.pause',
                params: {
                    room_session_id: this.getStateProperty('roomSessionId'),
                    recording_id: this.getStateProperty('id'),
                },
            });
        });
    }
    resume() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.execute({
                method: 'video.recording.resume',
                params: {
                    room_session_id: this.getStateProperty('roomSessionId'),
                    recording_id: this.getStateProperty('id'),
                },
            });
        });
    }
    stop() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.execute({
                method: 'video.recording.stop',
                params: {
                    room_session_id: this.getStateProperty('roomSessionId'),
                    recording_id: this.getStateProperty('id'),
                },
            });
        });
    }
}
exports.RoomSessionRecordingAPI = RoomSessionRecordingAPI;
const createRoomSessionRecordingObject = (params) => {
    const recording = (0, redux_1.connect)({
        store: params.store,
        Component: RoomSessionRecordingAPI,
    })(params);
    return recording;
};
exports.createRoomSessionRecordingObject = createRoomSessionRecordingObject;
//# sourceMappingURL=RoomSessionRecording.js.map