"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const testUtils_1 = require("../testUtils");
const BaseComponent_1 = require("../BaseComponent");
const EventEmitter_1 = require("../utils/EventEmitter");
const redux_1 = require("../redux");
const CustomMethods = tslib_1.__importStar(require("./methods"));
const RoomSessionRecording_1 = require("./RoomSessionRecording");
describe('Room Custom Methods', () => {
    let store;
    let instance;
    Object.defineProperties(BaseComponent_1.BaseComponent.prototype, CustomMethods);
    beforeEach(() => {
        store = (0, testUtils_1.configureJestStore)();
        instance = (0, redux_1.connect)({
            store,
            Component: BaseComponent_1.BaseComponent,
        })({
            emitter: new EventEmitter_1.EventEmitter(),
        });
        instance.execute = jest.fn();
    });
    it('should have all the custom methods defined', () => {
        Object.keys(CustomMethods).forEach((method) => {
            expect(instance[method]).toBeDefined();
        });
    });
    describe('startRecording', () => {
        it('should return the raw payload w/o emitterTransforms', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            ;
            instance.execute.mockResolvedValueOnce({
                code: '200',
                message: 'Recording started',
                recording_id: 'c22d7223-5a01-49fe-8da0-46bec8e75e32',
                recording: {
                    state: 'recording',
                },
            });
            instance.roomSessionId = 'mocked';
            const response = yield instance.startRecording();
            expect(instance.execute).toHaveBeenCalledTimes(1);
            expect(instance.execute).toHaveBeenCalledWith({
                method: 'video.recording.start',
                params: {
                    room_session_id: 'mocked',
                },
            });
            expect(response).toBeInstanceOf(RoomSessionRecording_1.RoomSessionRecordingAPI);
            expect(response.roomSessionId).toBe('mocked');
            expect(response.state).toBe('recording');
        }));
    });
    describe('setLayout', () => {
        it('should execute with proper params', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            ;
            instance.execute.mockResolvedValueOnce({});
            instance.roomSessionId = 'mocked';
            yield instance.setLayout({
                positions: {
                    'c22d7124-5a01-49fe-8da0-46bec8e75f12': 'reserved',
                },
            });
            expect(instance.execute).toHaveBeenCalledTimes(1);
            expect(instance.execute).toHaveBeenCalledWith({
                method: 'video.set_layout',
                params: {
                    room_session_id: 'mocked',
                    positions: {
                        'c22d7124-5a01-49fe-8da0-46bec8e75f12': 'reserved',
                    },
                },
            }, {
                transformResolve: expect.anything(),
            });
        }));
    });
    describe('setPositions', () => {
        it('should execute with proper params', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            ;
            instance.execute.mockResolvedValueOnce({});
            instance.roomSessionId = 'mocked';
            yield instance.setPositions({
                positions: {
                    'cebecb3a-b9e4-499c-a707-0af96c110a04': 'auto',
                    'aaaaaaa-b9e4-499c-a707-0af96c110a04': 'standard-1',
                },
            });
            expect(instance.execute).toHaveBeenCalledTimes(1);
            expect(instance.execute).toHaveBeenCalledWith({
                method: 'video.set_position',
                params: {
                    room_session_id: 'mocked',
                    positions: {
                        'cebecb3a-b9e4-499c-a707-0af96c110a04': 'auto',
                        'aaaaaaa-b9e4-499c-a707-0af96c110a04': 'standard-1',
                    },
                },
            }, {
                transformResolve: expect.anything(),
            });
        }));
    });
    describe('setMemberPosition', () => {
        it('should execute with proper params', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            ;
            instance.execute.mockResolvedValueOnce({});
            instance.roomSessionId = 'mocked';
            yield instance.setMemberPosition({
                member_id: 'cebecb3a-b9e4-499c-a707-0af96c110a04',
                position: 'auto',
            });
            expect(instance.execute).toHaveBeenCalledTimes(1);
            expect(instance.execute).toHaveBeenCalledWith({
                method: 'video.member.set_position',
                params: {
                    room_session_id: 'mocked',
                    member_id: 'cebecb3a-b9e4-499c-a707-0af96c110a04',
                    position: 'auto',
                },
            }, {
                transformResolve: expect.anything(),
            });
        }));
    });
    describe('play', () => {
        beforeEach(() => {
            ;
            instance.execute.mockResolvedValueOnce({
                playback: {},
            });
        });
        it.each([
            {
                input: {
                    positions: { 'c22d7124-5a01-49fe-8da0-46bec8e75f12': 'reserved' },
                },
                output: {
                    positions: { 'c22d7124-5a01-49fe-8da0-46bec8e75f12': 'reserved' },
                },
            },
            { input: { seekPosition: 20000 }, output: { seek_position: 20000 } },
            { input: { currentTimecode: 10000 }, output: { seek_position: 10000 } },
        ])('should execute with proper params', ({ input, output }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const url = 'https://example.com/foo.mp4';
            instance.roomSessionId = 'mocked';
            yield instance.play(Object.assign({ url }, input));
            expect(instance.execute).toHaveBeenCalledTimes(1);
            expect(instance.execute).toHaveBeenCalledWith({
                method: 'video.playback.start',
                params: Object.assign({ room_session_id: 'mocked', url }, output),
            });
        }));
    });
    describe('promote', () => {
        it('should execute with proper params', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            ;
            instance.execute.mockResolvedValueOnce({});
            instance.roomSessionId = 'mocked';
            yield instance.promote({
                memberId: 'c22d7124-5a01-49fe-8da0-46bec8e75f12',
                mediaAllowed: 'all',
                permissions: [
                    'room.self.audio_mute',
                    'room.self.audio_unmute',
                    'room.self.video_mute',
                    'room.self.video_unmute',
                    'room.list_available_layouts',
                ],
            });
            expect(instance.execute).toHaveBeenCalledTimes(1);
            expect(instance.execute).toHaveBeenCalledWith({
                method: 'video.member.promote',
                params: {
                    room_session_id: 'mocked',
                    member_id: 'c22d7124-5a01-49fe-8da0-46bec8e75f12',
                    media_allowed: 'all',
                    permissions: [
                        'room.self.audio_mute',
                        'room.self.audio_unmute',
                        'room.self.video_mute',
                        'room.self.video_unmute',
                        'room.list_available_layouts',
                    ],
                },
            }, {
                transformResolve: expect.anything(),
            });
        }));
    });
    describe('demote', () => {
        it('should execute with proper params', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            ;
            instance.execute.mockResolvedValueOnce({});
            instance.roomSessionId = 'mocked';
            yield instance.demote({
                memberId: 'c22d7124-5a01-49fe-8da0-46bec8e75f12',
                mediaAllowed: 'all',
            });
            expect(instance.execute).toHaveBeenCalledTimes(1);
            expect(instance.execute).toHaveBeenCalledWith({
                method: 'video.member.demote',
                params: {
                    room_session_id: 'mocked',
                    member_id: 'c22d7124-5a01-49fe-8da0-46bec8e75f12',
                    media_allowed: 'all',
                },
            }, {
                transformResolve: expect.anything(),
            });
        }));
    });
    describe('setRaisedHand', () => {
        it.each([
            {
                input: {
                    memberId: 'c22d7124-5a01-49fe-8da0-46bec8e75f12',
                },
                method: 'video.member.raisehand',
            },
            {
                input: {
                    memberId: 'c22d7124-5a01-49fe-8da0-46bec8e75f12',
                    raised: true,
                },
                method: 'video.member.raisehand',
            },
            {
                input: {
                    memberId: 'c22d7124-5a01-49fe-8da0-46bec8e75f12',
                    raised: false,
                },
                method: 'video.member.lowerhand',
            },
            {
                input: {},
                method: 'video.member.raisehand',
            },
        ])('should execute with proper params', ({ input, method }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            ;
            instance.execute.mockResolvedValueOnce({});
            instance.roomSessionId = 'mocked';
            instance.memberId = 'c22d7124-5a01-49fe-8da0-46bec8e75f12';
            yield instance.setRaisedHand(input);
            expect(instance.execute).toHaveBeenCalledTimes(1);
            expect(instance.execute).toHaveBeenCalledWith({
                method,
                params: {
                    room_session_id: 'mocked',
                    member_id: 'c22d7124-5a01-49fe-8da0-46bec8e75f12',
                },
            }, {
                transformResolve: expect.anything(),
            });
        }));
    });
    describe('setPrioritizeHandraise', () => {
        it.each([true, false])('should execute with proper params', (enable) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            ;
            instance.execute.mockResolvedValueOnce({});
            instance.roomSessionId = 'mocked';
            yield instance.setPrioritizeHandraise(enable);
            expect(instance.execute).toHaveBeenCalledTimes(1);
            expect(instance.execute).toHaveBeenCalledWith({
                method: 'video.prioritize_handraise',
                params: {
                    room_session_id: 'mocked',
                    enable,
                },
            });
        }));
    });
});
//# sourceMappingURL=methods.test.js.map