"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const util_1 = tslib_1.__importDefault(require("util"));
const redux_saga_test_plan_1 = require("redux-saga-test-plan");
const _1 = require(".");
const testUtils_1 = require("../testUtils");
const BaseComponent_1 = require("../BaseComponent");
describe('memberPositionWorker', () => {
    util_1.default.inspect.defaultOptions.depth = null;
    class JestComponent extends BaseComponent_1.BaseComponent {
        constructor() {
            super({
                store: (0, testUtils_1.configureJestStore)(),
            });
        }
    }
    let instance;
    beforeEach(() => {
        instance = new JestComponent();
    });
    afterEach(() => {
        instance.removeAllListeners();
    });
    const memberId = 'ab42641c-e784-42f1-9815-d264105bc24f';
    const action = {
        type: 'video.member.updated',
        payload: {
            room_session_id: '8e03ac25-8622-411a-95fc-f897b34ac9e7',
            room_id: '6e83849b-5cc2-4fc6-80ed-448113c8a426',
            member: {
                requested_position: 'auto',
                updated: ['visible', 'video_muted'],
                room_session_id: '8e03ac25-8622-411a-95fc-f897b34ac9e7',
                id: memberId,
                visible: true,
                room_id: '6e83849b-5cc2-4fc6-80ed-448113c8a426',
                video_muted: false,
            },
        },
    };
    const swEventChannel = (0, testUtils_1.createSwEventChannel)();
    const sessionChannel = (0, testUtils_1.createSessionChannel)();
    const memberList = new Map([
        [
            memberId,
            {
                room_session_id: '8e03ac25-8622-411a-95fc-f897b34ac9e7',
                room_id: '6e83849b-5cc2-4fc6-80ed-448113c8a426',
                member: {
                    requested_position: 'auto',
                    room_session_id: '8e03ac25-8622-411a-95fc-f897b34ac9e7',
                    id: memberId,
                    visible: false,
                    room_id: '6e83849b-5cc2-4fc6-80ed-448113c8a426',
                    video_muted: true,
                },
            },
        ],
    ]);
    const session = {
        connect: jest.fn(),
    };
    const getSession = jest.fn().mockImplementation(() => session);
    it('should handle video.member.updated dispatching the sub-events for what is changed for the user and updating the internal cache', () => {
        // A spy for the emitter.emit method
        const emitSpy = jest.spyOn(instance, 'emit');
        return (0, redux_saga_test_plan_1.expectSaga)(_1.memberUpdatedWorker, {
            action,
            channels: {
                swEventChannel,
                sessionChannel,
            },
            memberList,
            instance,
            instanceMap: { get: jest.fn(), set: jest.fn(), remove: jest.fn() },
            getSession,
        })
            .run()
            .finally(() => {
            var _a, _b, _c;
            expect(emitSpy).toHaveBeenCalledWith('member.updated.visible', action.payload);
            expect(emitSpy).toHaveBeenCalledWith('member.updated.video_muted', action.payload);
            expect(emitSpy).toHaveBeenCalledWith('member.updated', action.payload);
            expect((_a = memberList.get(memberId)) === null || _a === void 0 ? void 0 : _a.member.visible).toBe(true);
            expect((_b = memberList.get(memberId)) === null || _b === void 0 ? void 0 : _b.member.video_muted).toBe(false);
            expect((_c = memberList.get(memberId)) === null || _c === void 0 ? void 0 : _c.member.updated).toStrictEqual([
                'visible',
                'video_muted',
            ]);
        });
    });
    it('should handle video.member.updated dispatching using the dispatcher function if passed', () => {
        // A spy for the emitter.emit method
        const emitSpy = jest.spyOn(instance, 'emit');
        // A mock dispatcher function
        const mockDispatcher = jest.fn();
        return (0, redux_saga_test_plan_1.expectSaga)(_1.memberUpdatedWorker, {
            action,
            channels: {
                swEventChannel,
                sessionChannel,
            },
            memberList,
            instance,
            instanceMap: { get: jest.fn(), set: jest.fn(), remove: jest.fn() },
            getSession,
            dispatcher: mockDispatcher,
        })
            .run()
            .finally(() => {
            expect(emitSpy).toHaveBeenCalledTimes(0);
            expect(mockDispatcher).toHaveBeenCalledTimes(3);
        });
    });
});
//# sourceMappingURL=workers.test.js.map