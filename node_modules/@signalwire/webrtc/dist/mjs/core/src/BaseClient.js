import { destroyAction, initAction } from './redux';
import { BaseComponent } from './BaseComponent';
import { getAuthStatus } from './redux/features/session/sessionSelectors';
export class BaseClient extends BaseComponent {
    constructor(options) {
        super(options);
        this.options = options;
    }
    /**
     * Connect the underlay WebSocket connection to the SignalWire network.
     *
     * @returns Promise that will resolve with the Client object.
     */
    connect() {
        const authStatus = getAuthStatus(this.store.getState());
        if (authStatus === 'unknown' || authStatus === 'unauthorized') {
            this.store.dispatch(initAction());
        }
        return this._waitUntilSessionAuthorized();
    }
    /**
     * Disconnect the Client from the SignalWire network.
     */
    disconnect() {
        this.store.dispatch(destroyAction());
    }
}
//# sourceMappingURL=BaseClient.js.map