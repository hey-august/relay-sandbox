import { sagaEffects, getLogger, toExternalJSON, ChatMessage, ChatMember, stripNamespacePrefix, } from '../../index';
export const chatWorker = function* (options) {
    getLogger().trace('chatWorker started');
    const { instance: client, channels: { swEventChannel }, } = options;
    function* worker(action) {
        const { type, payload } = action;
        switch (type) {
            case 'chat.channel.message': {
                const { channel, message } = payload;
                const externalJSON = toExternalJSON(Object.assign(Object.assign({}, message), { channel }));
                const chatMessage = new ChatMessage(externalJSON);
                client.emit('message', chatMessage);
                break;
            }
            case 'chat.member.joined':
            case 'chat.member.updated':
            case 'chat.member.left': {
                const { member } = payload;
                const externalJSON = toExternalJSON(member);
                const chatMessage = new ChatMember(externalJSON);
                const event = stripNamespacePrefix(type);
                client.emit(event, chatMessage);
                break;
            }
            default:
                getLogger().warn(`Unknown chat event: "${type}"`);
                break;
        }
    }
    const isChatEvent = (action) => action.type.startsWith('chat.');
    while (true) {
        const action = yield sagaEffects.take(swEventChannel, isChatEvent);
        yield sagaEffects.fork(worker, action);
    }
    getLogger().trace('chatWorker ended');
};
//# sourceMappingURL=chatWorker.js.map