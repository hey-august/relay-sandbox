import { __rest } from "tslib";
import { toExternalJSON } from '../utils';
import { toInternalChatChannels, isValidChannels } from './utils';
/**
 * Transform for returning `undefined` for `execute`s that were
 * successully resolved. If the `execute` failed for some reason, then
 * the promise will be rejected and this transform will never be
 * executed.
 */
const baseCodeTransform = () => { };
const createChatMethod = (method, options = {}) => ({
    value: function (params = {}) {
        return this.execute({
            method,
            params,
        }, options);
    },
});
const createChatMemberMethod = (method, options = {}) => ({
    value: function (_a = {}) {
        var { memberId } = _a, rest = __rest(_a, ["memberId"]);
        return this.execute({
            method,
            params: Object.assign({ member_id: memberId }, rest),
        }, options);
    },
});
/**
 * Chat Methods
 */
export const publish = createChatMethod('chat.publish', {
    transformResolve: baseCodeTransform,
});
export const getMessages = createChatMethod('chat.messages.get', {
    transformResolve: (payload) => ({
        messages: payload.messages.map((message) => toExternalJSON(message)),
        cursor: payload.cursor,
    }),
});
export const getMembers = createChatMethod('chat.members.get', {
    transformResolve: (payload) => ({
        members: payload.members.map((member) => toExternalJSON(member)),
    }),
});
const transformParamChannels = (params) => {
    const channels = isValidChannels(params === null || params === void 0 ? void 0 : params.channels)
        ? toInternalChatChannels(params.channels)
        : undefined;
    return Object.assign(Object.assign({}, params), { channels });
};
/**
 * Chat Member Methods
 */
export const setMemberState = createChatMemberMethod('chat.member.set_state', {
    transformResolve: baseCodeTransform,
    transformParams: transformParamChannels,
});
export const getMemberState = createChatMemberMethod('chat.member.get_state', {
    transformResolve: (payload) => ({ channels: payload.channels }),
    transformParams: transformParamChannels,
});
//# sourceMappingURL=methods.js.map