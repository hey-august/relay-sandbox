export function debounce(fn, wait = 0, callFirst) {
    let timeout = null;
    let debouncedFn = null;
    const clear = function () {
        if (timeout) {
            clearTimeout(timeout);
            debouncedFn = null;
            timeout = null;
        }
    };
    const flush = function () {
        const call = debouncedFn;
        clear();
        if (call) {
            call();
        }
    };
    const debounceWrapper = function () {
        if (!wait) {
            // @ts-expect-error
            return fn.apply(this, arguments);
        }
        // @ts-expect-error
        const context = this;
        const args = arguments;
        const callNow = callFirst && !timeout;
        clear();
        // @ts-expect-error
        debouncedFn = function () {
            fn.apply(context, args);
        };
        timeout = setTimeout(function () {
            timeout = null;
            if (!callNow) {
                const call = debouncedFn;
                debouncedFn = null;
                return call === null || call === void 0 ? void 0 : call();
            }
        }, wait);
        if (callNow && debouncedFn) {
            return debouncedFn();
        }
    };
    debounceWrapper.cancel = clear;
    debounceWrapper.flush = flush;
    return debounceWrapper;
}
//# sourceMappingURL=debounce.js.map