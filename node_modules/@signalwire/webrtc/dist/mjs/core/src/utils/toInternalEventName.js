import { fromCamelToSnakeCase } from './common';
import { EVENT_NAMESPACE_DIVIDER } from './constants';
export const toInternalEventName = ({ event, namespace, }) => {
    // TODO: improve types of getNamespacedEvent and fromCamelToSnakeCase
    if (typeof event === 'string') {
        // other transforms here..
        event = getNamespacedEvent({
            event,
            namespace,
        });
        event = fromCamelToSnakeCase(event);
    }
    return event;
};
const getNamespacedEvent = ({ namespace, event, }) => {
    /**
     * If getNamespacedEvent is called with the `namespace` already
     * present in the `event` or with a falsy namespace we'll return it
     * as is
     */
    if (!namespace || event.startsWith(namespace)) {
        return event;
    }
    return `${namespace}${EVENT_NAMESPACE_DIVIDER}${event}`;
};
//# sourceMappingURL=toInternalEventName.js.map