import { connect } from '../redux';
import { BaseComponent } from '../BaseComponent';
export class RoomSessionStreamAPI extends BaseComponent {
    constructor(options) {
        super(options);
        this._payload = options.payload;
    }
    get id() {
        return this._payload.stream.id;
    }
    get roomId() {
        return this._payload.room_id;
    }
    get roomSessionId() {
        return this._payload.room_session_id;
    }
    get state() {
        return this._payload.stream.state;
    }
    get duration() {
        return this._payload.stream.duration;
    }
    get url() {
        return this._payload.stream.url;
    }
    get startedAt() {
        if (!this._payload.stream.started_at)
            return undefined;
        return new Date(this._payload.stream.started_at * 1000);
    }
    get endedAt() {
        if (!this._payload.stream.ended_at)
            return undefined;
        return new Date(this._payload.stream.ended_at * 1000);
    }
    /** @internal */
    setPayload(payload) {
        this._payload = payload;
    }
    async stop() {
        await this.execute({
            method: 'video.stream.stop',
            params: {
                room_session_id: this.getStateProperty('roomSessionId'),
                stream_id: this.getStateProperty('id'),
            },
        });
    }
}
export const createRoomSessionStreamObject = (params) => {
    const stream = connect({
        store: params.store,
        Component: RoomSessionStreamAPI,
    })(params);
    return stream;
};
//# sourceMappingURL=RoomSessionStream.js.map