import { connect } from '../redux';
import { BaseComponent } from '../BaseComponent';
export class RoomSessionPlaybackAPI extends BaseComponent {
    constructor(options) {
        super(options);
        this._payload = options.payload;
    }
    get id() {
        return this._payload.playback.id;
    }
    get roomId() {
        return this._payload.room_id;
    }
    get roomSessionId() {
        return this._payload.room_session_id;
    }
    get url() {
        return this._payload.playback.url;
    }
    get state() {
        return this._payload.playback.state;
    }
    get volume() {
        return this._payload.playback.volume;
    }
    get startedAt() {
        if (!this._payload.playback.started_at)
            return undefined;
        return new Date(this._payload.playback.started_at * 1000);
    }
    get endedAt() {
        if (!this._payload.playback.ended_at)
            return undefined;
        return new Date(this._payload.playback.ended_at * 1000);
    }
    get position() {
        return this._payload.playback.position;
    }
    get seekable() {
        return this._payload.playback.seekable;
    }
    /** @internal */
    setPayload(payload) {
        this._payload = payload;
    }
    async pause() {
        await this.execute({
            method: 'video.playback.pause',
            params: {
                room_session_id: this.getStateProperty('roomSessionId'),
                playback_id: this.getStateProperty('id'),
            },
        });
    }
    async resume() {
        await this.execute({
            method: 'video.playback.resume',
            params: {
                room_session_id: this.getStateProperty('roomSessionId'),
                playback_id: this.getStateProperty('id'),
            },
        });
    }
    async stop() {
        await this.execute({
            method: 'video.playback.stop',
            params: {
                room_session_id: this.getStateProperty('roomSessionId'),
                playback_id: this.getStateProperty('id'),
            },
        });
    }
    async setVolume(volume) {
        await this.execute({
            method: 'video.playback.set_volume',
            params: {
                room_session_id: this.getStateProperty('roomSessionId'),
                playback_id: this.getStateProperty('id'),
                volume,
            },
        });
    }
    async seek(timecode) {
        await this.execute({
            method: 'video.playback.seek_absolute',
            params: {
                room_session_id: this.getStateProperty('roomSessionId'),
                playback_id: this.getStateProperty('id'),
                position: Math.abs(timecode),
            },
        });
    }
    async forward(offset = 5000) {
        await this.execute({
            method: 'video.playback.seek_relative',
            params: {
                room_session_id: this.getStateProperty('roomSessionId'),
                playback_id: this.getStateProperty('id'),
                position: Math.abs(offset),
            },
        });
    }
    async rewind(offset = 5000) {
        await this.execute({
            method: 'video.playback.seek_relative',
            params: {
                room_session_id: this.getStateProperty('roomSessionId'),
                playback_id: this.getStateProperty('id'),
                position: -Math.abs(offset),
            },
        });
    }
}
export const createRoomSessionPlaybackObject = (params) => {
    const playback = connect({
        store: params.store,
        Component: RoomSessionPlaybackAPI,
    })(params);
    return playback;
};
//# sourceMappingURL=RoomSessionPlayback.js.map