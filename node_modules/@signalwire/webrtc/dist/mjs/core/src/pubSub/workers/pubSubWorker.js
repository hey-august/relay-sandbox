import { __rest } from "tslib";
import { PRODUCT_PREFIX_PUBSUB } from '../../utils/constants';
import { sagaEffects, getLogger, PubSubMessage, toExternalJSON, } from '../../index';
export const pubSubWorker = function* (options) {
    getLogger().trace('pubSubWorker started');
    const { instance: client, channels: { swEventChannel }, } = options;
    function* worker(action) {
        const { type, payload } = action;
        switch (type) {
            case `${PRODUCT_PREFIX_PUBSUB}.channel.message`: {
                const { channel } = payload, 
                /**
                 * Since we're using the same event as `Chat`
                 * the payload comes with a `member` prop. To
                 * avoid confusion (since `PubSub` doesn't
                 * have members) we'll remove it from the
                 * payload sent to the end user.
                 */
                // @ts-expect-error
                _a = payload.message, 
                /**
                 * Since we're using the same event as `Chat`
                 * the payload comes with a `member` prop. To
                 * avoid confusion (since `PubSub` doesn't
                 * have members) we'll remove it from the
                 * payload sent to the end user.
                 */
                // @ts-expect-error
                { member } = _a, restMessage = __rest(_a, ["member"]);
                const externalJSON = toExternalJSON(Object.assign(Object.assign({}, restMessage), { channel }));
                const pubSubMessage = new PubSubMessage(externalJSON);
                client.emit('message', pubSubMessage);
                break;
            }
            default:
                getLogger().warn(`Unknown pubsub event: "${type}"`);
                break;
        }
    }
    const isPubSubEvent = (action) => action.type.startsWith(`${PRODUCT_PREFIX_PUBSUB}.`);
    while (true) {
        const action = yield sagaEffects.take(swEventChannel, isPubSubEvent);
        yield sagaEffects.fork(worker, action);
    }
    getLogger().trace('pubSubWorker ended');
};
//# sourceMappingURL=pubSubWorker.js.map