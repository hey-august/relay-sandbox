import { call } from '@redux-saga/core/effects';
import { getLogger } from '../utils/logger';
import { RPCExecute } from '../RPCMessages/RPCExecute';
/**
 * Send a JSONRPC over the wire using session.execute and resolve/reject the promise
 */
export const executeActionWorker = function* (options) {
    const { initialState, onDone, onFail, getSession } = options;
    const { requestId, method, params } = initialState;
    const session = getSession();
    if (!session) {
        const error = new Error('Session does not exist!');
        getLogger().error(error);
        onFail === null || onFail === void 0 ? void 0 : onFail(error);
        return;
    }
    try {
        const message = RPCExecute({
            id: requestId,
            method,
            params,
        });
        const response = yield call(session.execute, message);
        onDone === null || onDone === void 0 ? void 0 : onDone(response);
    }
    catch (error) {
        getLogger().warn('Execute error: ', error);
        onFail === null || onFail === void 0 ? void 0 : onFail(error);
    }
};
//# sourceMappingURL=executeActionWorker.js.map