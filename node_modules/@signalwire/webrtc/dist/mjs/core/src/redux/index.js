import createSagaMiddleware, { channel, multicastChannel, } from '@redux-saga/core';
import { configureStore as rtConfigureStore } from './toolkit';
import { rootReducer } from './rootReducer';
import rootSaga from './rootSaga';
import { connect } from './connect';
import { useSession } from './utils/useSession';
import { useInstanceMap } from './utils/useInstanceMap';
const configureStore = (options) => {
    var _a;
    const { userOptions, SessionConstructor, preloadedState = {}, runSagaMiddleware = true, } = options;
    const sagaMiddleware = createSagaMiddleware();
    const swEventChannel = multicastChannel();
    const sessionChannel = channel();
    /**
     * List of channels that are gonna be shared across all
     * sagas.
     */
    const channels = {
        swEventChannel,
        sessionChannel,
    };
    const store = rtConfigureStore({
        devTools: (_a = userOptions === null || userOptions === void 0 ? void 0 : userOptions.devTools) !== null && _a !== void 0 ? _a : true,
        reducer: rootReducer,
        preloadedState,
        middleware: (getDefaultMiddleware) => 
        // It is preferrable to use the chainable .concat(...) and
        // .prepend(...) methods of the returned MiddlewareArray instead
        // of the array spread operator, as the latter can lose valuable
        // type information under some circumstances.
        // @see https://redux-toolkit.js.org/api/getDefaultMiddleware#intended-usage
        getDefaultMiddleware().concat(sagaMiddleware),
    });
    const { initSession, getSession, sessionEmitter } = useSession({
        userOptions,
        sessionChannel,
        SessionConstructor,
    });
    const map = useInstanceMap();
    const runSaga = (saga, args) => {
        return sagaMiddleware.run(saga, Object.assign(Object.assign({}, args), { channels,
            getSession, instanceMap: map }));
    };
    if (runSagaMiddleware) {
        const saga = rootSaga({
            initSession,
            sessionEmitter,
        });
        sagaMiddleware.run(saga, { userOptions, channels });
    }
    return Object.assign(Object.assign({}, store), { runSaga,
        channels, instanceMap: map, sessionEmitter });
};
export { connect, configureStore };
export * from './actions';
export * from './utils/sagaHelpers';
export * from './toolkit';
//# sourceMappingURL=index.js.map