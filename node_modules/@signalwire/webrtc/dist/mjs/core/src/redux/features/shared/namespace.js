import { getLogger } from '../../../utils';
const isVideoMemberEvent = (action) => {
    return (action.type.startsWith('video.member.') ||
        // TODO: find a better way to do this check.
        action.type.startsWith('video.__synthetic__.member'));
};
const isVideoRoomEvent = (action) => {
    return action.type.startsWith('video.room.');
};
const isVideoRoomAudienceCountEvent = (action) => {
    return (action.type === 'video.room.audience_count' ||
        action.type === 'video.room.audienceCount');
};
const isVideoLayoutEvent = (action) => {
    return action.type.startsWith('video.layout.');
};
const isVideoRecordingEvent = (action) => {
    return action.type.startsWith('video.recording.');
};
const isVideoPlaybackEvent = (action) => {
    return action.type.startsWith('video.playback.');
};
const isVideoStreamEvent = (action) => {
    return action.type.startsWith('video.stream.');
};
const isChatEvent = (action) => {
    return action.type.startsWith('chat.');
};
const isVoiceCallEvent = (action) => {
    return action.type.startsWith('calling.');
};
export const findNamespaceInPayload = (action) => {
    var _a;
    if (action.payload === undefined) {
        return '';
    }
    else if (isVideoMemberEvent(action) ||
        isVideoLayoutEvent(action) ||
        isVideoRecordingEvent(action) ||
        isVideoPlaybackEvent(action) ||
        isVideoStreamEvent(action) ||
        isVideoRoomAudienceCountEvent(action)) {
        return action.payload.room_session_id;
    }
    else if (isVideoRoomEvent(action)) {
        return action.payload.room_session.id;
    }
    else if (isChatEvent(action)) {
        return '';
    }
    else if (isVoiceCallEvent(action)) {
        /**
         * Some calling events (ie: `calling.call.receive`) have no "tag"
         * but we inject it within the workers before put the action.
         * See voiceCallPlayWorker as an example.
         */
        // @ts-expect-error
        return (_a = action.payload.tag) !== null && _a !== void 0 ? _a : '';
    }
    if ('development' === process.env.NODE_ENV) {
        getLogger().info('Namespace not found for action.type: ', action === null || action === void 0 ? void 0 : action.type);
    }
    return '';
};
//# sourceMappingURL=namespace.js.map