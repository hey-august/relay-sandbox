import { createDestroyableSlice } from '../../utils/createDestroyableSlice';
import { authErrorAction, initAction, reauthAction } from '../../actions';
export const initialSessionState = {
    protocol: '',
    iceServers: [],
    authStatus: 'unknown',
    authState: undefined,
    authError: undefined,
    authCount: 0,
};
function authorizingAction(action) {
    return [initAction.type, reauthAction.type].includes(action.type);
}
const sessionSlice = createDestroyableSlice({
    name: 'session',
    initialState: initialSessionState,
    reducers: {
        connected: (state, { payload }) => {
            var _a, _b;
            return Object.assign(Object.assign({}, state), { authStatus: 'authorized', authState: payload === null || payload === void 0 ? void 0 : payload.authorization, authCount: state.authCount + 1, protocol: (_a = payload === null || payload === void 0 ? void 0 : payload.protocol) !== null && _a !== void 0 ? _a : '', iceServers: (_b = payload === null || payload === void 0 ? void 0 : payload.ice_servers) !== null && _b !== void 0 ? _b : [] });
        },
        authStatus: (state, { payload }) => {
            return Object.assign(Object.assign({}, state), { authStatus: payload });
        },
        updateAuthState: (state, { payload }) => {
            return Object.assign(Object.assign({}, state), { authState: payload });
        },
    },
    extraReducers: (builder) => {
        builder.addCase(authErrorAction.type, (state, { payload }) => {
            return Object.assign(Object.assign({}, state), { authStatus: 'unauthorized', authError: payload.error });
        });
        builder.addMatcher(authorizingAction, (state) => {
            return Object.assign(Object.assign({}, state), { authStatus: 'authorizing' });
        });
    },
});
// prettier-ignore
export const { actions: sessionActions, reducer: sessionReducer } = sessionSlice;
//# sourceMappingURL=sessionSlice.js.map