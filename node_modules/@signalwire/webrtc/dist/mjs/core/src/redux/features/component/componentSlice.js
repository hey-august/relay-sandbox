import { createDestroyableSlice } from '../../utils/createDestroyableSlice';
export const initialComponentState = {
    byId: {},
};
const componentSlice = createDestroyableSlice({
    name: 'components',
    initialState: initialComponentState,
    reducers: {
        upsert: (state, { payload }) => {
            if (payload.id in state.byId) {
                return Object.assign(Object.assign({}, state), { byId: Object.assign(Object.assign({}, state.byId), { [payload.id]: Object.assign(Object.assign({}, state.byId[payload.id]), payload) }) });
            }
            else {
                return Object.assign(Object.assign({}, state), { byId: Object.assign(Object.assign({}, state.byId), { [payload.id]: payload }) });
            }
        },
        cleanup: (state, { payload }) => {
            return Object.assign(Object.assign({}, state), { byId: Object.entries(state.byId).reduce((reducer, [componentId, value]) => {
                    if (!payload.ids.includes(componentId)) {
                        reducer[componentId] = value;
                    }
                    return reducer;
                }, {}) });
        },
    },
});
// prettier-ignore
export const { actions: componentActions, reducer: componentReducer } = componentSlice;
//# sourceMappingURL=componentSlice.js.map