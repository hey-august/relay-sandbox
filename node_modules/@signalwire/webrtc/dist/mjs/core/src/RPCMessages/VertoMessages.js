import { __rest } from "tslib";
import { makeRPCRequest, makeRPCResponse } from './helpers';
const tmpMap = {
    id: 'callID',
    destinationNumber: 'destination_number',
    remoteCallerName: 'remote_caller_id_name',
    remoteCallerNumber: 'remote_caller_id_number',
    callerName: 'caller_id_name',
    callerNumber: 'caller_id_number',
};
/**
 * Translate SDK fields into verto variables
 */
const filterVertoParams = (params) => {
    if (params.hasOwnProperty('dialogParams')) {
        // prettier-ignore
        const _a = params.dialogParams, { remoteSdp, localStream, remoteStream } = _a, dialogParams = __rest(_a, ["remoteSdp", "localStream", "remoteStream"]);
        for (const key in tmpMap) {
            if (key && dialogParams.hasOwnProperty(key)) {
                // @ts-ignore
                dialogParams[tmpMap[key]] = dialogParams[key];
                delete dialogParams[key];
            }
        }
        params.dialogParams = dialogParams;
    }
    return params;
};
const buildVertoRPCMessage = (method) => {
    return (params = {}) => {
        return makeRPCRequest({
            method,
            params: filterVertoParams(params),
        });
    };
};
export const VertoInvite = buildVertoRPCMessage('verto.invite');
export const VertoBye = buildVertoRPCMessage('verto.bye');
export const VertoAttach = buildVertoRPCMessage('verto.attach');
export const VertoModify = buildVertoRPCMessage('verto.modify');
export const VertoInfo = buildVertoRPCMessage('verto.info');
export const VertoAnswer = buildVertoRPCMessage('verto.answer');
export const VertoSubscribe = buildVertoRPCMessage('verto.subscribe');
export const VertoPong = buildVertoRPCMessage('verto.pong');
export const VertoResult = (id, method) => {
    return makeRPCResponse({
        id,
        result: {
            method,
        },
    });
};
//# sourceMappingURL=VertoMessages.js.map